# -*- coding: utf-8 -*-
"""Lvadsusr86_garvit_lab4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j3a-YfHKBThfWBZfUVkmqUTsVcxX1Ywv
"""

import pandas as pd
from sklearn.ensemble import IsolationForest
import warnings
warnings.filterwarnings('ignore')
import matplotlib.pyplot as plt

df = pd.read_csv('https://raw.githubusercontent.com/Deepsphere-AI/LVA-Batch4-Assessment/main/social_network.csv')

df

from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()

df['account_status_Encoded'] = label_encoder.fit_transform(df['account_status'])

print(df[['account_status', 'account_status_Encoded']])

features = ["login_activity", "posting_activity", "social_connections"]

df

X = df[features]

model = IsolationForest(n_estimators=100, contamination=0.1)

model = IsolationForest()

model.fit(X)

# Predict the anomalies in the data
y_pred = model.predict(X)

df["anomaly_score"] = model.decision_function(X)

anomalies = df.loc[df["anomaly_score"] < 0]

#Predict
df_test= pd.read_csv("https://raw.githubusercontent.com/Deepsphere-AI/LVA-Batch4-Assessment/main/social_network.csv")
x=df_test[["login_activity", "posting_activity", "social_connections"]]
df_values=x.values

find=df_values

result=[]
for i in find:
  z=model.predict([i])
  if z==[1]:
    result.append('Not Anomaly')
  elif z==[-1]:
    result.append('Anomaly')

df_test['Anomaly']=result
print(df_test)

plt.scatter(df["social_connections"], df["anomaly_score"], label="Not Anomaly")
plt.scatter(anomalies["social_connections"], anomalies["anomaly_score"], color="r", label="Anomaly")
plt.xlabel("Social Connections")
plt.ylabel("anomaly_score")
plt.legend()
plt.show()